import random
from timegen import DummyGenerator

# generate a 0-indexed temporal graph with distinct positive timestamps


class GraphGenerator:

    # return a list of tuples representing the edges in the following format:
    # (u, v, tbegin, tend)
    # where u, v are the vertices (0-indexed)
    # tbegin, tend are the positive timestamps generated by time_gen
    @staticmethod
    def gen_edges(V, E, T):
        neighbours = [GraphGenerator.get_neighbours(V) for i in range(E)]
        edges = GraphGenerator.add_timestamps(neighbours, T)
        return edges

    # return an adjacency list for each vertex of the graph
    # adj[u]: [(v1, tbegin1, tend1), (v2, tbegin2, tend2), ...]
    # for each vertex u and its neighbours
    @staticmethod
    def gen_adjacencies(V, E, T):
        edges = GraphGenerator.gen_edges(V, E, T)
        adj = [[] for i in range(V)]
        for edge in edges:
            u, v, tbegin, tend = edge
            adj[u].append((v, tbegin, tend))
        return adj

    def get_neighbours(V):
        return [random.randrange(start=0, stop=V) for i in range(2)]

    def add_timestamps(edges, T):
        temporal_edges = []
        for pair in edges:
            u, v = pair
            tbegin = random.randint(0, T)
            tend = random.randint(0, T)
            if tend < tbegin:
                tbegin, tend = tend, tbegin  # swap
            temporal_edges.append((u, v, tbegin, tend))
        return temporal_edges
